function [ A ] = FibTorusEquidistributed(r,R,k,thetavar)
% Generate F_k Fibonacci type points which are equidistributed on a torus 
% where F_k is the kth Fibonacci number. Radius of the tube of the torus is
% r, and the radius from the center of torus to the center of the tube is 
% R. Points are generated on the unit square and mapped under an equal area  
% projection to the torus.

% Input thetavar must be a 1x1 sym.

% Output is 3 x N matrix.

% Create Fibonacci nodes on the square. An exact Fibonacci number is needed
% because the lattice generated by the matrix B will be 1- periodic in  the 
% y coordinate. The map Proj glues the top edge of [0,1]^2 to the bottom 
% edge so this periodicity is needed to keep separation of the toroidal 
% points.
N = round(((1+sqrt(5))^k-(1-sqrt(5))^k)/(2^k*sqrt(5)));

A = zeros(N,3);
B = zeros(N,2);
gr = (1+sqrt(5))/2;
for i=1:N
    B(i,:) = [i/gr-floor(i/gr),i/N];
end
thetaguess = 0;
for i=1:N
    %The angle theta at the ith stage becomes the initial guess for the 
    %(i+1)th stage 
   [A(i,:),thetaguess] = Proj(B(i,:),thetaguess,r,R,thetavar);
end

    function [X,theta] = Proj(v,thetaguess,r,R,thetavar)
        %Proj takes a vector in [0,1]^2 as input and returns Cartesian
        %coordinates and angle theta. Thetaguess provides an initial guess
        %for Matlab's numerical solver.
        syms thetavar
        phi = 2*pi*v(1,1);
        
        %Determine theta by matching rectangular area to toroidal surface
        %area
        h = 1/4-r/(2*pi*R);
        if(v(1,2)<=1/2)
          y = v(1,2);
           if(y<h)
        theta  = vpasolve(2/(R*pi-2*pi)*(R*thetavar-r*sin(thetavar)) == y/h, thetavar,thetaguess);
        theta = pi-theta;
           
           else
        theta  = vpasolve(2/(R*pi+2*pi)*(R*thetavar+r*sin(thetavar)) == (1/2-y)/(1/2-h), thetavar,thetaguess);
           end
        else
         y = 1-v(1,2);
         if(y<h)
        theta  = vpasolve(2/(R*pi-2*pi)*(R*thetavar-r*sin(thetavar)) == y/h, thetavar,thetaguess);
        theta = theta-pi;
          else
        theta  = vpasolve(2/(R*pi+2*pi)*(R*thetavar+r*sin(thetavar)) == (1/2-y)/(1/2-h), thetavar,thetaguess);
        theta = -theta;
            end
            
        end
        
        X(1,1) = (R+r*cos(theta))*cos(phi);
        X(1,2) = (R+r*cos(theta))*sin(phi);
        X(1,3) = r*sin(theta);
        
    end


end

